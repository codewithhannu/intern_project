from fastapi import FastAPI, WebSocket
from fastapi.responses import JSONResponse
from fastapi.middleware.cors import CORSMiddleware
import random
import asyncio

app = FastAPI()

# Enable CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Generate mock telemetry data for robots
robots = [
    {
        "id": i,
        "name": f"Robot {i}",
        "latitude": random.uniform(-90, 90),
        "longitude": random.uniform(-180, 180),
        "battery": random.randint(10, 100),
        "cpu": random.randint(0, 100),
        "ram": random.randint(0, 100),
        "online": random.choice([True, False]),
    }
    for i in range(1, 11)
]

@app.get("/robots")
async def get_robot_data():
    """REST endpoint to get current robot data."""
    return JSONResponse(content=robots)

@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    """WebSocket endpoint for real-time updates."""
    await websocket.accept()
    try:
        while True:
            # Simulate updates to robot data
            for robot in robots:
                robot["latitude"] += random.uniform(-0.01, 0.01)
                robot["longitude"] += random.uniform(-0.01, 0.01)
                robot["battery"] = max(0, robot["battery"] - random.randint(0, 5))
                robot["cpu"] = random.randint(0, 100)
                robot["ram"] = random.randint(0, 100)
                robot["online"] = random.choice([True, False]) if random.random() < 0.1 else robot["online"]

            # Send updated data to WebSocket client
            await websocket.send_json(robots)
            await asyncio.sleep(1)
    except Exception as e:
        print(f"WebSocket disconnected: {e}")
